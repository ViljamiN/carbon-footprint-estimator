from datetime import datetime
from openai import OpenAI
import threading
import os
import sys
import time
import dotenv

dotenv.load_dotenv()

class CarbonFootprintEstimator:
    def add_purchase(self, purchase_description, co2_amount):
        self.log(purchase_description, co2_amount)

    def calculate_carbon_footprint(self, purchase):
        api_key = os.getenv("OPENAI_API_KEY")
        if not api_key:
            print("Error: OpenAI API key not found. Make sure it is set in the .env file.\nAlternatively, you can provide the API key as an input here.")
            api_key = input("Enter your OpenAI API key: ")
            if not api_key:
                print("Error: OpenAI API key not found. Exiting.")
            return

        client = OpenAI(api_key=api_key)

        prompt = "Provide an approximate number (and nothing else) for the amount CO2 as kilograms generated by purchasing the following item: " + purchase

        print("Analysing your purchase description...")
        continue_flag = threading.Event()
        spinner_thread = threading.Thread(target=self.rolling_spinner, args=(continue_flag,))
        spinner_thread.start()

        completion = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are a CO2-footprint calculator, making estimates based on your knowledge - you always answer with a number as an estimate of the amount of CO2 in kilograms generated by purchasing a particular item."},
                {"role": "user", "content": prompt},
            ]
        )
        continue_flag.set()
        spinner_thread.join()

        generated_text = completion.choices[0].message.content
        if not any(char.isdigit() for char in generated_text):
            print("Please describe the item in more detail. I do not know what you are trying to say.")
            return "UNCLEAR DESCRIPTION"
        else:
            generated_number = ''.join(filter(lambda x: x.isdigit() or x in ['.', ','], generated_text))

            generated_number = generated_number.replace(',', '.')

            if generated_number.count('.') > 1:
                print("Error. Logging cancelled. Please try again or contact the developer.")
                return "ERROR"

        return float(generated_number)

    @staticmethod
    def rolling_spinner(continue_flag):
        spinner_chars = ['-', '\\', '|', '/']
        i = 0
        while not continue_flag.is_set():
            sys.stdout.write('\r' + spinner_chars[i])
            sys.stdout.flush()
            time.sleep(0.1)
            i = (i + 1) % len(spinner_chars)
        sys.stdout.write('\r')
        sys.stdout.flush()

    def log(self, purchase_description, co2_amount):
        script_directory = os.path.dirname(os.path.abspath(sys.argv[0]))
        log_file_path = os.path.join(script_directory, "carbon_footprint_log.txt")

        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"{timestamp} - Purchase: {purchase_description}, CO2: {co2_amount} kg CO2e\n"

        with open(log_file_path, "a") as log_file:
            log_file.write(log_entry)


def main():
    estimator = CarbonFootprintEstimator()

    while True:
        print("\n---Main Menu---")
        print("1. Add a purchase")
        print("2. Calculate CO2 footprint")
        print("3. Open the log file in separate window")
        print("4. Exit")

        choice = input(">")

        if choice not in ["1", "2", "3", "4"]:
            print("Invalid choice. Please enter a valid option.")
            continue

        elif choice == "1":
            while True:
                print("\n---Add purchases--\nDescribe your purchased item or enter 'b' to go back to the main menu.")
                purchase_description = input(">")

                if purchase_description.lower() == 'b':
                    break

                if purchase_description == "":
                    print("Please enter a description.")
                    continue

                co2_amount = estimator.calculate_carbon_footprint(purchase_description)
                if co2_amount in ["ERROR", "UNCLEAR DESCRIPTION"]:
                    if co2_amount == "ERROR":
                        error_description = "ERROR - unclear number"
                    else:
                        error_description = "UNCLEAR DESCRIPTION"
                    estimator.add_purchase(error_description, 0)
                else:
                    estimator.add_purchase(purchase_description, co2_amount)
                    print(f"The estimated CO2 from this purchase: {co2_amount} kg CO2e. Purchase added to list.")

        elif choice == "2":
            while True:
                print("\n---Calculating CO2 footprint---")

                script_directory = os.path.dirname(os.path.abspath(sys.argv[0]))
                log_file_path = os.path.join(script_directory, "carbon_footprint_log.txt")
                if not os.path.exists(log_file_path):
                    print("No purchases have been logged yet.")
                    break
                with open(log_file_path, "r") as log_file:
                    if log_file.read() == "":
                        print("No purchases have been logged yet.")
                        break
                    else:
                        log_file.seek(0)
                        total_co2 = 0
                        for line in log_file:
                            words = line.split()
                            co2_index = words.index("CO2:")
                            if words[co2_index + 1] not in ["ERROR", "UNCLEAR"]:
                                total_co2 += float(words[co2_index + 1])
                        print(f"Estimated CO2 footprint for your purchases: {total_co2} kg CO2e.")
                        break
        
        elif choice == "3":
            print("\n---Opening log file---")
            script_directory = os.path.dirname(os.path.abspath(sys.argv[0]))
            log_file_path = os.path.join(script_directory, "carbon_footprint_log.txt")
            if not os.path.exists(log_file_path):
                print("No purchases have been logged yet.")
            else:
                os.system("start " + log_file_path)

        elif choice == "4":
            #ask for confirmation
            confirmation = input("Are you sure you want to exit? (y/n)\n>")
            if confirmation.lower() == "y":
                print("Exiting the program. Goodbye!")
                break
            else:
                continue

if __name__ == "__main__":
    main()
